package Avianca.Utils;

import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import java.time.Duration;

public class ElementInteractions {
    private WebDriver driver;
    private WebDriverWait wait;
    public AngularInteractions angularInteractions; // Cambiado a public para acceso desde ButtonPages

    public ElementInteractions(WebDriver driver) {
        this.driver = driver;
        this.wait = new WebDriverWait(driver, Duration.ofSeconds(5));
        this.angularInteractions = new AngularInteractions(driver);
    }

    /**
     * üîß Hace scroll a un elemento
     * @param elemento Elemento al que se har√° scroll
     */
    public void scrollToElement(WebElement elemento) {
        try {
            ((JavascriptExecutor) driver).executeScript("arguments[0].scrollIntoView({block: 'center'});", elemento);
        } catch (Exception e) {
            System.out.println("‚ö†Ô∏è No se pudo hacer scroll al elemento: " + e.getMessage());
        }
    }

    /**
     * üîß Intenta hacer clic normal
     * @param elemento Elemento sobre el que se har√° clic
     * @return true si el clic fue exitoso, false en caso contrario
     */
    public boolean intentarClicNormal(WebElement elemento) {
        try {
            wait.until(ExpectedConditions.elementToBeClickable(elemento));
            elemento.click();
            System.out.println("‚úÖ Clic normal realizado con √©xito");
            return true;
        } catch (Exception e) {
            System.out.println("‚ö†Ô∏è Clic normal fall√≥: " + e.getMessage());
            return false;
        }
    }

    /**
     * üîß Intenta hacer hover y luego clic con Actions
     * @param elemento Elemento sobre el que se har√° hover y clic
     * @return true si el clic fue exitoso, false en caso contrario
     */
    public boolean intentarClicConHoverYClick(WebElement elemento) {
        try {
            System.out.println("üñ±Ô∏è Intentando hacer hover sobre el elemento...");
            
            Actions actions = new Actions(driver);
            actions.moveToElement(elemento).perform();
            System.out.println("‚úÖ Hover realizado sobre el elemento");
            
            Thread.sleep(2000);
            
            wait.until(ExpectedConditions.visibilityOf(elemento));
            wait.until(ExpectedConditions.elementToBeClickable(elemento));
            
            actions.click().perform();
            System.out.println("‚úÖ Clic realizado despu√©s del hover");
            
            return true;
        } catch (Exception e) {
            System.out.println("‚ö†Ô∏è Fall√≥ el intento de hover y clic: " + e.getMessage());
            return false;
        }
    }

    /**
     * üîß Clic con JavaScript como alternativa
     * @param elemento Elemento sobre el que se har√° clic
     * @return true si el clic fue exitoso, false en caso contrario
     */
    public boolean intentarClickConJavaScript(WebElement elemento) {
        try {
            ((JavascriptExecutor) driver).executeScript("arguments[0].click();", elemento);
            System.out.println("‚úÖ Clic realizado con JavaScript");
            return true;
        } catch (Exception e) {
            System.err.println("‚ùå Fall√≥ el clic con JavaScript: " + e.getMessage());
            return false;
        }
    }

    /**
     * üîß M√âTODO MEJORADO: Intenta hacer hover y luego clic con soporte para Angular
     */
    public boolean intentarClicConHoverYClickAngular(WebElement elemento) {
        try {
            System.out.println("üñ±Ô∏è Intentando hacer hover y clic con soporte para Angular...");
            
            // Paso 1: Simular hover espec√≠fico para Angular
            if (!angularInteractions.simularHoverAngular(elemento)) {
                System.out.println("‚ùå No se pudo simular el hover en Angular");
                return false;
            }
            
            // Paso 2: Realizar clic despu√©s del hover
            if (!angularInteractions.realizarClicDespuesHover(elemento)) {
                System.out.println("‚ùå No se pudo realizar el clic despu√©s del hover");
                return false;
            }
            
            System.out.println("‚úÖ Hover y clic realizados exitosamente en Angular");
            return true;
        } catch (Exception e) {
            System.out.println("‚ö†Ô∏è Fall√≥ el intento de hover y clic en Angular: " + e.getMessage());
            return false;
        }
    }

    /**
     * üîß Clic con soporte completo para Angular (NgZone)
     * @param elemento WebElement sobre el que se har√° clic
     * @return true si el clic fue exitoso, false en caso contrario
     */
    public boolean intentarClicConSoporteAngular(WebElement elemento) {
        try {
            System.out.println("üîÑ Intentando clic con soporte completo para Angular...");
            
            // Paso 1: Esperar a que Angular est√© listo
            angularInteractions.waitForAngularReady();
            
            // Paso 2: Esperar a que el elemento sea visible y clickeable
            wait.until(ExpectedConditions.visibilityOf(elemento));
            wait.until(ExpectedConditions.elementToBeClickable(elemento));
            
            // Paso 3: Hacer scroll al elemento
            scrollToElement(elemento);
            
            // Paso 4: Esperar un momento despu√©s del scroll
            Thread.sleep(500);
            
            // Paso 5: Disparar eventos de mouse completos
            angularInteractions.dispatchMouseEvents(elemento);
            
            // Paso 6: Esperar a que Angular procese los eventos
            angularInteractions.waitForAngularReady();
            
            System.out.println("‚úÖ Clic con soporte Angular realizado");
            return true;
        } catch (Exception e) {
            System.err.println("‚ùå Fall√≥ el clic con soporte Angular: " + e.getMessage());
            return false;
        }
    }

    /**
     * üîß Clic dentro de la zona de Angular (NgZone)
     * @param elemento WebElement sobre el que se har√° clic
     * @return true si el clic fue exitoso, false en caso contrario
     */
    public boolean intentarClicDentroNgZone(WebElement elemento) {
        try {
            System.out.println("üîÑ Intentando clic dentro de NgZone...");
            
            // Esperar a que Angular est√© listo
            angularInteractions.waitForAngularReady();
            
            // Esperar a que el elemento sea visible
            wait.until(ExpectedConditions.visibilityOf(elemento));
            
            // Hacer scroll al elemento
            scrollToElement(elemento);
            
            // Realizar clic dentro de NgZone
            angularInteractions.clickInsideNgZone(elemento);
            
            // Esperar a que Angular procese el clic
            angularInteractions.waitForAngularReady();
            
            System.out.println("‚úÖ Clic dentro de NgZone realizado");
            return true;
        } catch (Exception e) {
            System.err.println("‚ùå Fall√≥ el clic dentro de NgZone: " + e.getMessage());
            return false;
        }
    }

    /**
     * üîß Clic con forzado de detecci√≥n de cambios de Angular
     * @param elemento WebElement sobre el que se har√° clic
     * @return true si el clic fue exitoso, false en caso contrario
     */
    public boolean intentarClicConDeteccionForzada(WebElement elemento) {
        try {
            System.out.println("üîÑ Intentando clic con detecci√≥n forzada de Angular...");
            
            // Esperar a que el elemento sea visible y clickeable
            wait.until(ExpectedConditions.visibilityOf(elemento));
            wait.until(ExpectedConditions.elementToBeClickable(elemento));
            
            // Hacer scroll al elemento
            scrollToElement(elemento);
            
            // Forzar la detecci√≥n de cambios antes del clic
            angularInteractions.forceAngularChangeDetection();
            
            // Realizar clic con JavaScript
            ((JavascriptExecutor) driver).executeScript("arguments[0].click();", elemento);
            
            // Forzar la detecci√≥n de cambios despu√©s del clic
            angularInteractions.forceAngularChangeDetection();
            
            // Esperar a que Angular procese
            angularInteractions.waitForAngularReady();
            
            System.out.println("‚úÖ Clic con detecci√≥n forzada realizado");
            return true;
        } catch (Exception e) {
            System.err.println("‚ùå Fall√≥ el clic con detecci√≥n forzada: " + e.getMessage());
            return false;
        }
    }

    /**
     * üîÑ Realiza clic en un elemento usando m√∫ltiples estrategias
     * @param elemento WebElement sobre el que se har√° clic
     * @return true si el clic fue exitoso, false en caso contrario
     */
    public boolean realizarClicConMultiplesEstrategias(WebElement elemento) {
        try {
            System.out.println("üîÑ Intentando clic con m√∫ltiples estrategias...");
            
            // Estrategia 1: Clic normal
            if (intentarClicNormal(elemento)) {
                return true;
            }
            
            // Estrategia 2: Clic con hover y Actions
            if (intentarClicConHoverYClick(elemento)) {
                return true;
            }
            
            // Estrategia 3: Clic con JavaScript
            if (intentarClickConJavaScript(elemento)) {
                return true;
            }
            
            // Estrategia 4: Clic con Angular
            if (intentarClicConHoverYClickAngular(elemento)) {
                return true;
            }
            
            // Si todas las estrategias fallan
            System.out.println("‚ùå Todas las estrategias de clic fallaron");
            return false;
            
        } catch (Exception e) {
            System.err.println("‚ùå Error al realizar clic con m√∫ltiples estrategias: " + e.getMessage());
            return false;
        }
    }

    /**
     * üñ±Ô∏è Realiza clic en un elemento usando JavaScriptExecutor (prioridad)
     * @param elemento WebElement sobre el que se har√° clic
     * @return true si el clic fue exitoso, false en caso contrario
     */
    public boolean realizarClicConJavaScript(WebElement elemento) {
        try {
            System.out.println("üîß Ejecutando clic con JavaScriptExecutor...");
            
            // M√©todo 1: Usando click() de JavaScript
            ((JavascriptExecutor) driver).executeScript("arguments[0].click();", elemento);
            
            System.out.println("‚úÖ Clic con JavaScript ejecutado correctamente");
            
            // Peque√±a espera para asegurar que se procese el clic
            Thread.sleep(500);
            
            return true;
            
        } catch (Exception e) {
            System.err.println("‚ùå Error al realizar clic con JavaScript: " + e.getMessage());
            return false;
        }
    }

    /**
     * üîÑ Realiza clic en un elemento usando un enfoque h√≠brido (JavaScript + estrategias tradicionales)
     * @param elemento WebElement sobre el que se har√° clic
     * @return true si el clic fue exitoso, false en caso contrario
     */
    public boolean realizarClicHibrido(WebElement elemento) {
        try {
            System.out.println("üîÑ Intentando clic con enfoque h√≠brido...");
            
            // Estrategia 1: JavaScriptExecutor (prioridad)
            if (realizarClicConJavaScript(elemento)) {
                return true;
            }
            
            // Estrategia 2: Clic normal
            if (intentarClicNormal(elemento)) {
                return true;
            }
            
            // Estrategia 3: Clic con hover y Actions
            if (intentarClicConHoverYClick(elemento)) {
                return true;
            }
            
            // Estrategia 4: Clic con Angular
            if (intentarClicConHoverYClickAngular(elemento)) {
                return true;
            }
            
            // Si todas las estrategias fallan
            System.out.println("‚ùå Todas las estrategias de clic fallaron");
            return false;
            
        } catch (Exception e) {
            System.err.println("‚ùå Error al realizar clic con enfoque h√≠brido: " + e.getMessage());
            return false;
        }
    }

    /**
     * üîÑ Realiza clic en un elemento usando un enfoque h√≠brido con soporte Angular
     * @param elemento WebElement sobre el que se har√° clic
     * @return true si el clic fue exitoso, false en caso contrario
     */
    public boolean realizarClicHibridoConAngular(WebElement elemento) {
        try {
            System.out.println("üîÑ Intentando clic con enfoque h√≠brido y soporte Angular...");
            
            // Estrategia 1: Clic con soporte completo para Angular
            if (intentarClicConSoporteAngular(elemento)) {
                return true;
            }
            
            // Estrategia 2: Clic dentro de NgZone
            if (intentarClicDentroNgZone(elemento)) {
                return true;
            }
            
            // Estrategia 3: Clic con detecci√≥n forzada
            if (intentarClicConDeteccionForzada(elemento)) {
                return true;
            }
            
            // Estrategia 4: Clic normal
            if (intentarClicNormal(elemento)) {
                return true;
            }
            
            // Estrategia 5: Clic con hover y Actions
            if (intentarClicConHoverYClick(elemento)) {
                return true;
            }
            
            // Estrategia 6: Clic con JavaScript tradicional
            if (intentarClickConJavaScript(elemento)) {
                return true;
            }
            
            // Estrategia 7: Clic con Angular (el m√©todo que ya ten√≠as)
            if (intentarClicConHoverYClickAngular(elemento)) {
                return true;
            }
            
            // Si todas las estrategias fallan
            System.out.println("‚ùå Todas las estrategias de clic fallaron");
            return false;
            
        } catch (Exception e) {
            System.err.println("‚ùå Error al realizar clic con enfoque h√≠brido Angular: " + e.getMessage());
            return false;
        }
    }
}